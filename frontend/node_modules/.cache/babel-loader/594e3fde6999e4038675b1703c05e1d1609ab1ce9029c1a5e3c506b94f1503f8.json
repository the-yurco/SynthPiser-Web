{"ast":null,"code":"var _jsxFileName = \"/home/jurco/SynthPiser-Web/frontend/src/components/Keyboard.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keyboard = () => {\n  const audioContext = new AudioContext();\n  const loadSample = async note => {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio(`/piano-flash-cards/audio/C${note}v10.mp3`);\n      audio.preload = 'auto';\n      audio.oncanplaythrough = async () => {\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaElementSource(audio);\n        const audioBuffer = await source.buffer;\n        resolve(audioBuffer);\n      };\n      audio.onerror = error => {\n        reject(new Error(`Failed to load audio for note C${note}: ${error}`));\n      };\n    });\n  };\n  const playNote = async note => {\n    const sample = await loadSample(note);\n    const source = audioContext.createBufferSource();\n    source.buffer = sample;\n    source.connect(audioContext.destination);\n    source.start(0);\n  };\n  const handleButtonClick = async note => {\n    await playNote(note);\n  };\n\n  // Generate buttons for piano keys\n  const renderPianoKeys = () => {\n    const pianoKeys = [];\n    const rows = 2;\n    const columns = 8;\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < columns; col++) {\n        const note = row * columns + col + 1; // Note numbers start from 1\n        pianoKeys.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleButtonClick(note),\n          children: `C${note}`\n        }, note, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 6\n        }, this));\n      }\n      pianoKeys.push( /*#__PURE__*/_jsxDEV(\"br\", {}, `row-${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }, this)); // Add line break after each row\n    }\n    return pianoKeys;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard\",\n    children: renderPianoKeys()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_c = Keyboard;\nexport default Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Keyboard","audioContext","AudioContext","loadSample","note","Promise","resolve","reject","audio","Audio","preload","oncanplaythrough","source","createMediaElementSource","audioBuffer","buffer","onerror","error","Error","playNote","sample","createBufferSource","connect","destination","start","handleButtonClick","renderPianoKeys","pianoKeys","rows","columns","row","col","push","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/home/jurco/SynthPiser-Web/frontend/src/components/Keyboard.tsx"],"sourcesContent":["import React from 'react';\n\nconst Keyboard: React.FC = () => {\n\tconst audioContext = new AudioContext();\n\n\tconst loadSample = async (note: number) => {\n\t\treturn new Promise<AudioBuffer>((resolve, reject) => {\n\t\t\tconst audio = new Audio(`/piano-flash-cards/audio/C${note}v10.mp3`);\n\t\t\taudio.preload = 'auto';\n\t\t\taudio.oncanplaythrough = async () => {\n\t\t\t\tconst audioContext = new AudioContext();\n\t\t\t\tconst source = audioContext.createMediaElementSource(audio);\n\t\t\t\tconst audioBuffer = await source.buffer;\n\t\t\t\tresolve(audioBuffer);\n\t\t\t};\n\t\t\taudio.onerror = (error) => {\n\t\t\t\treject(new Error(`Failed to load audio for note C${note}: ${error}`));\n\t\t\t};\n\t\t});\n\t};\n\n\tconst playNote = async (note: number) => {\n\t\tconst sample = await loadSample(note);\n\t\tconst source = audioContext.createBufferSource();\n\t\tsource.buffer = sample;\n\t\tsource.connect(audioContext.destination);\n\t\tsource.start(0);\n\t};\n\n\tconst handleButtonClick = async (note: number) => {\n\t\tawait playNote(note);\n\t};\n\n\t// Generate buttons for piano keys\n\tconst renderPianoKeys = () => {\n\t\tconst pianoKeys: JSX.Element[] = [];\n\t\tconst rows = 2;\n\t\tconst columns = 8;\n\n\t\tfor (let row = 0; row < rows; row++) {\n\t\t\tfor (let col = 0; col < columns; col++) {\n\t\t\t\tconst note = row * columns + col + 1; // Note numbers start from 1\n\t\t\t\tpianoKeys.push(\n\t\t\t\t\t<button key={note} onClick={() => handleButtonClick(note)}>\n\t\t\t\t\t\t{`C${note}`}\n\t\t\t\t\t</button>\n\t\t\t\t);\n\t\t\t}\n\t\t\tpianoKeys.push(<br key={`row-${row}`} />); // Add line break after each row\n\t\t}\n\n\t\treturn pianoKeys;\n\t};\n\n\treturn <div className=\"keyboard\">{renderPianoKeys()}</div>;\n};\n\nexport default Keyboard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAChC,MAAMC,YAAY,GAAG,IAAIC,YAAY,CAAC,CAAC;EAEvC,MAAMC,UAAU,GAAG,MAAOC,IAAY,IAAK;IAC1C,OAAO,IAAIC,OAAO,CAAc,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpD,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAE,6BAA4BL,IAAK,SAAQ,CAAC;MACnEI,KAAK,CAACE,OAAO,GAAG,MAAM;MACtBF,KAAK,CAACG,gBAAgB,GAAG,YAAY;QACpC,MAAMV,YAAY,GAAG,IAAIC,YAAY,CAAC,CAAC;QACvC,MAAMU,MAAM,GAAGX,YAAY,CAACY,wBAAwB,CAACL,KAAK,CAAC;QAC3D,MAAMM,WAAW,GAAG,MAAMF,MAAM,CAACG,MAAM;QACvCT,OAAO,CAACQ,WAAW,CAAC;MACrB,CAAC;MACDN,KAAK,CAACQ,OAAO,GAAIC,KAAK,IAAK;QAC1BV,MAAM,CAAC,IAAIW,KAAK,CAAE,kCAAiCd,IAAK,KAAIa,KAAM,EAAC,CAAC,CAAC;MACtE,CAAC;IACF,CAAC,CAAC;EACH,CAAC;EAED,MAAME,QAAQ,GAAG,MAAOf,IAAY,IAAK;IACxC,MAAMgB,MAAM,GAAG,MAAMjB,UAAU,CAACC,IAAI,CAAC;IACrC,MAAMQ,MAAM,GAAGX,YAAY,CAACoB,kBAAkB,CAAC,CAAC;IAChDT,MAAM,CAACG,MAAM,GAAGK,MAAM;IACtBR,MAAM,CAACU,OAAO,CAACrB,YAAY,CAACsB,WAAW,CAAC;IACxCX,MAAM,CAACY,KAAK,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAOrB,IAAY,IAAK;IACjD,MAAMe,QAAQ,CAACf,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMsB,eAAe,GAAGA,CAAA,KAAM;IAC7B,MAAMC,SAAwB,GAAG,EAAE;IACnC,MAAMC,IAAI,GAAG,CAAC;IACd,MAAMC,OAAO,GAAG,CAAC;IAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;MACpC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,OAAO,EAAEE,GAAG,EAAE,EAAE;QACvC,MAAM3B,IAAI,GAAG0B,GAAG,GAAGD,OAAO,GAAGE,GAAG,GAAG,CAAC,CAAC,CAAC;QACtCJ,SAAS,CAACK,IAAI,eACbjC,OAAA;UAAmBkC,OAAO,EAAEA,CAAA,KAAMR,iBAAiB,CAACrB,IAAI,CAAE;UAAA8B,QAAA,EACvD,IAAG9B,IAAK;QAAC,GADCA,IAAI;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAET,CACT,CAAC;MACF;MACAX,SAAS,CAACK,IAAI,eAACjC,OAAA,WAAU,OAAM+B,GAAI,EAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC,CAAC,CAAC;IAC5C;IAEA,OAAOX,SAAS;EACjB,CAAC;EAED,oBAAO5B,OAAA;IAAKwC,SAAS,EAAC,UAAU;IAAAL,QAAA,EAAER,eAAe,CAAC;EAAC;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC3D,CAAC;AAACE,EAAA,GArDIxC,QAAkB;AAuDxB,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}