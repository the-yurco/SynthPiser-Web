{"ast":null,"code":"var _jsxFileName = \"/home/jurco/SynthPiser-Web/frontend/src/components/BeatControls.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaPlay, FaPause, FaStop, FaRedo } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BeatControls = ({\n  socket\n}) => {\n  _s();\n  const [timerValue, setTimerValue] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const [recordedButtons, setRecordedButtons] = useState([]);\n  const timerRef = useRef(null);\n  const buttonPins = [3, 7, 11]; // Example button pins for demonstration\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n    if (!timerRunning) {\n      setTimerValue(0);\n      setTimerRunning(true);\n      timerRef.current = window.setInterval(() => {\n        setTimerValue(prevValue => {\n          if (prevValue >= 10000) {\n            setTimerRunning(false);\n            window.clearInterval(timerRef.current);\n            return 0;\n          }\n          return prevValue + 10; // Increase by 10 milliseconds\n        });\n      }, 10); // Update every 10 milliseconds\n    } else {\n      setTimerRunning(false);\n      window.clearInterval(timerRef.current);\n    }\n  };\n  const stopPlayback = () => {\n    setIsPlaying(false);\n    setTimerRunning(false);\n    setTimerValue(0);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n  };\n  const resetTimer = () => {\n    setRecordedButtons([]);\n    setTimerValue(0);\n  };\n  const handleButtonPress = pin => {\n    setRecordedButtons(prevButtons => [...prevButtons, timerValue]);\n  };\n  const handleClearRecordedButtons = () => {\n    setRecordedButtons([]);\n  };\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'assign_sound' && data.pin) {\n          setRecordedButtons(prevButtons => [...prevButtons, timerValue]);\n        }\n      };\n    }\n  }, [socket, timerValue]);\n  useEffect(() => {\n    if (isPlaying) {\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < recordedButtons.length) {\n          setTimerValue(recordedButtons[index]);\n          index++;\n        } else {\n          clearInterval(interval);\n          setIsPlaying(false);\n        }\n      }, 10); // Update every 10 milliseconds\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, recordedButtons]);\n\n  // Function to format milliseconds to \"X.XXX s\" format\n  const formatMilliseconds = ms => {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = (ms % 1000).toString().padStart(3, '0');\n    return `${seconds}.${milliseconds} s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"beat-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-axis\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-display\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: formatMilliseconds(timerValue)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), recordedButtons.map((time, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-indicator\",\n        style: {\n          left: `${time / 10000 * 100}%`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlayPause,\n        children: isPlaying ? /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPlayback,\n        children: /*#__PURE__*/_jsxDEV(FaStop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: /*#__PURE__*/_jsxDEV(FaRedo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearRecordedButtons,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"static-buttons\",\n      children: buttonPins.map((pin, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonPress(pin),\n        children: [\"Test Button \", index + 1]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 3\n  }, this);\n};\n_s(BeatControls, \"eo/3czruISWE6L7A13rEA34+/r8=\");\n_c = BeatControls;\nexport default BeatControls;\nvar _c;\n$RefreshReg$(_c, \"BeatControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FaPlay","FaPause","FaStop","FaRedo","jsxDEV","_jsxDEV","BeatControls","socket","_s","timerValue","setTimerValue","isPlaying","setIsPlaying","timerRunning","setTimerRunning","recordedButtons","setRecordedButtons","timerRef","buttonPins","togglePlayPause","current","window","setInterval","prevValue","clearInterval","stopPlayback","resetTimer","handleButtonPress","pin","prevButtons","handleClearRecordedButtons","onmessage","event","data","JSON","parse","type","index","interval","length","formatMilliseconds","ms","seconds","Math","floor","milliseconds","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","time","style","left","onClick","_c","$RefreshReg$"],"sources":["/home/jurco/SynthPiser-Web/frontend/src/components/BeatControls.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n\tFaPlay,\n\tFaPause,\n\tFaStop,\n\tFaRedo,\n\tFaCircle,\n\tFaSquare\n} from 'react-icons/fa';\n\ntype BeatControlsProps = {\n\tsocket: WebSocket | null;\n};\n\nconst BeatControls = ({ socket }: BeatControlsProps) => {\n\tconst [timerValue, setTimerValue] = useState<number>(0);\n\tconst [isPlaying, setIsPlaying] = useState<boolean>(false);\n\tconst [timerRunning, setTimerRunning] = useState<boolean>(false);\n\tconst [recordedButtons, setRecordedButtons] = useState<number[]>([]);\n\tconst timerRef = useRef<number | null>(null);\n\n\tconst buttonPins = [3, 7, 11]; // Example button pins for demonstration\n\n\tconst togglePlayPause = () => {\n\t\tsetIsPlaying(!isPlaying);\n\t\tif (!timerRunning) {\n\t\t\tsetTimerValue(0);\n\t\t\tsetTimerRunning(true);\n\t\t\ttimerRef.current = window.setInterval(() => {\n\t\t\t\tsetTimerValue((prevValue) => {\n\t\t\t\t\tif (prevValue >= 10000) {\n\t\t\t\t\t\tsetTimerRunning(false);\n\t\t\t\t\t\twindow.clearInterval(timerRef.current!);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn prevValue + 10; // Increase by 10 milliseconds\n\t\t\t\t});\n\t\t\t}, 10); // Update every 10 milliseconds\n\t\t} else {\n\t\t\tsetTimerRunning(false);\n\t\t\twindow.clearInterval(timerRef.current!);\n\t\t}\n\t};\n\n\tconst stopPlayback = () => {\n\t\tsetIsPlaying(false);\n\t\tsetTimerRunning(false);\n\t\tsetTimerValue(0);\n\t\tif (timerRef.current) {\n\t\t\tclearInterval(timerRef.current);\n\t\t}\n\t};\n\n\tconst resetTimer = () => {\n\t\tsetRecordedButtons([]);\n\t\tsetTimerValue(0);\n\t};\n\n\tconst handleButtonPress = (pin: number) => {\n\t\tsetRecordedButtons((prevButtons) => [...prevButtons, timerValue]);\n\t};\n\n\tconst handleClearRecordedButtons = () => {\n\t\tsetRecordedButtons([]);\n\t};\n\n\tuseEffect(() => {\n\t\tif (socket) {\n\t\t\tsocket.onmessage = (event) => {\n\t\t\t\tconst data = JSON.parse(event.data);\n\t\t\t\tif (data.type === 'assign_sound' && data.pin) {\n\t\t\t\t\tsetRecordedButtons((prevButtons) => [...prevButtons, timerValue]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}, [socket, timerValue]);\n\n\tuseEffect(() => {\n\t\tif (isPlaying) {\n\t\t\tlet index = 0;\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tif (index < recordedButtons.length) {\n\t\t\t\t\tsetTimerValue(recordedButtons[index]);\n\t\t\t\t\tindex++;\n\t\t\t\t} else {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tsetIsPlaying(false);\n\t\t\t\t}\n\t\t\t}, 10); // Update every 10 milliseconds\n\t\t\treturn () => clearInterval(interval);\n\t\t}\n\t}, [isPlaying, recordedButtons]);\n\n\t// Function to format milliseconds to \"X.XXX s\" format\n\tconst formatMilliseconds = (ms: number): string => {\n\t\tconst seconds = Math.floor(ms / 1000);\n\t\tconst milliseconds = (ms % 1000).toString().padStart(3, '0');\n\t\treturn `${seconds}.${milliseconds} s`;\n\t};\n\n\treturn (\n\t\t<div className=\"beat-controls\">\n\t\t\t<div className=\"timer-axis\">\n\t\t\t\t<div className=\"timer-display\">\n\t\t\t\t\t<span>{formatMilliseconds(timerValue)}</span>\n\t\t\t\t</div>\n\t\t\t\t{recordedButtons.map((time, index) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tclassName=\"button-indicator\"\n\t\t\t\t\t\tstyle={{ left: `${(time / 10000) * 100}%` }}\n\t\t\t\t\t></div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"playback-controls\">\n\t\t\t\t<button onClick={togglePlayPause}>\n\t\t\t\t\t{isPlaying ? <FaPause /> : <FaPlay />}\n\t\t\t\t</button>\n\t\t\t\t<button onClick={stopPlayback}>\n\t\t\t\t\t<FaStop />\n\t\t\t\t</button>\n\t\t\t\t<button onClick={resetTimer}>\n\t\t\t\t\t<FaRedo />\n\t\t\t\t</button>\n\t\t\t\t<button onClick={handleClearRecordedButtons}>Clear</button>\n\t\t\t</div>\n\t\t\t<div className=\"static-buttons\">\n\t\t\t\t{buttonPins.map((pin, index) => (\n\t\t\t\t\t<button key={index} onClick={() => handleButtonPress(pin)}>\n\t\t\t\t\t\tTest Button {index + 1}\n\t\t\t\t\t</button>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default BeatControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}