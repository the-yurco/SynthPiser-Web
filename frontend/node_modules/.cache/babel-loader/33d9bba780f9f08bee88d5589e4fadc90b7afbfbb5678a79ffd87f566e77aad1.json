{"ast":null,"code":"var _jsxFileName = \"/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaPlay, FaPause, FaStop, FaRedo, FaSquare, FaReply } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BeatControls = ({\n  socket,\n  assignedSounds\n}) => {\n  _s();\n  const [timerValue, setTimerValue] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const [recordedButtons, setRecordedButtons] = useState([]);\n  const [axisPosition, setAxisPosition] = useState(0);\n  const timerRef = useRef(null);\n  const replayRef = useRef(false);\n  const audioRefs = useRef(assignedSounds.map(() => null));\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    setIsPlaying(!isPlaying);\n    if (!timerRunning) {\n      console.log('Starting timer...');\n      setTimerValue(0);\n      setTimerRunning(true);\n      timerRef.current = window.setInterval(() => {\n        setTimerValue(prevValue => {\n          if (prevValue >= 10000) {\n            console.log('Timer reached 10000 ms, stopping timer...');\n            setTimerRunning(false);\n            window.clearInterval(timerRef.current);\n            return 0;\n          }\n          return prevValue + 10; // Increase by 10 milliseconds\n        });\n      }, 10); // Update every 10 milliseconds\n    } else {\n      console.log('Pausing timer...');\n      setTimerRunning(false);\n      window.clearInterval(timerRef.current);\n    }\n  };\n  const stopPlayback = () => {\n    console.log('Stopping playback...');\n    setIsPlaying(false);\n    setTimerRunning(false);\n    setTimerValue(0);\n    setAxisPosition(0);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n  };\n  const resetTimer = () => {\n    console.log('Resetting timer and clearing recorded buttons...');\n    setRecordedButtons([]);\n    setTimerValue(0);\n    setAxisPosition(0);\n  };\n  const handleButtonPress = pin => {\n    console.log(`Button pressed at time: ${timerValue} ms`);\n    setRecordedButtons(prevButtons => [...prevButtons, timerValue]);\n  };\n  const handleClearRecordedButtons = () => {\n    console.log('Clearing recorded buttons...');\n    setRecordedButtons([]);\n  };\n  const handleReplay = () => {\n    if (recordedButtons.length > 0) {\n      console.log('Starting replay...');\n      setIsPlaying(true);\n      setTimerValue(0);\n      setAxisPosition(0);\n      replayRef.current = true;\n    }\n  };\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = event => {\n        console.log('Received message from socket:', event.data);\n        const data = JSON.parse(event.data);\n        if (data.type === 'button_click' && data.pin) {\n          console.log(`Button click received from pin ${data.pin}`);\n          setRecordedButtons(prevButtons => [...prevButtons, timerValue]);\n        }\n      };\n    }\n  }, [socket, timerValue]);\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Playing recorded buttons...');\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < recordedButtons.length) {\n          console.log(`Playing sound for recorded button at time: ${recordedButtons[index]} ms`);\n          setTimerValue(recordedButtons[index]);\n          setAxisPosition(recordedButtons[index] / 10000 * 100); // Update axis position\n\n          // Play the corresponding sound\n          const soundIndex = assignedSounds.findIndex((sound, i) => i === index);\n          if (soundIndex !== -1 && assignedSounds[soundIndex]) {\n            console.log(`Playing assigned sound at index: ${soundIndex}`);\n            if (audioRefs.current[soundIndex]) {\n              audioRefs.current[soundIndex].currentTime = 0;\n              audioRefs.current[soundIndex].play();\n            }\n          }\n          index++;\n        } else {\n          console.log('Completed playing all recorded buttons.');\n          clearInterval(interval);\n          setIsPlaying(false);\n          if (replayRef.current) {\n            replayRef.current = false;\n            setTimeout(() => {\n              console.log('Replaying after delay...');\n              togglePlayPause();\n            }, 500);\n          }\n        }\n      }, 10);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, recordedButtons, assignedSounds]);\n  const formatMilliseconds = ms => {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = (ms % 1000).toString().padStart(3, '0');\n    return `${seconds}.${milliseconds} s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"beat-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-display\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatMilliseconds(timerValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-axis\",\n      children: [recordedButtons.map((time, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-indicator\",\n        style: {\n          left: `${time / 10000 * 100}%`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-axis-display\",\n        style: {\n          left: `${axisPosition}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlayPause,\n        children: [isPlaying ? /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 38\n        }, this), \" \", isPlaying ? 'Pause' : 'Play']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPlayback,\n        children: [/*#__PURE__*/_jsxDEV(FaStop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), \" Stop\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: [/*#__PURE__*/_jsxDEV(FaRedo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), \" Reset\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearRecordedButtons,\n        children: [/*#__PURE__*/_jsxDEV(FaSquare, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), \" Clear Recorded\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReplay,\n        children: [/*#__PURE__*/_jsxDEV(FaReply, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), \" Replay\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), assignedSounds.map((sound, index) => /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: el => audioRefs.current[index] = el,\n      src: sound ? sound.preview : undefined\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(BeatControls, \"paMWR9a7NbpstYzU8HOAv8xWaTo=\");\n_c = BeatControls;\nexport default BeatControls;\nvar _c;\n$RefreshReg$(_c, \"BeatControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FaPlay","FaPause","FaStop","FaRedo","FaSquare","FaReply","jsxDEV","_jsxDEV","BeatControls","socket","assignedSounds","_s","timerValue","setTimerValue","isPlaying","setIsPlaying","timerRunning","setTimerRunning","recordedButtons","setRecordedButtons","axisPosition","setAxisPosition","timerRef","replayRef","audioRefs","map","togglePlayPause","console","log","current","window","setInterval","prevValue","clearInterval","stopPlayback","resetTimer","handleButtonPress","pin","prevButtons","handleClearRecordedButtons","handleReplay","length","onmessage","event","data","JSON","parse","type","index","interval","soundIndex","findIndex","sound","i","currentTime","play","setTimeout","formatMilliseconds","ms","seconds","Math","floor","milliseconds","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","time","style","left","onClick","ref","el","src","preview","undefined","_c","$RefreshReg$"],"sources":["/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n  FaPlay,\n  FaPause,\n  FaStop,\n  FaRedo,\n  FaCircle,\n  FaSquare,\n  FaReply\n} from 'react-icons/fa';\nimport { Sound } from '../pages/MainPage';\n\ntype BeatControlsProps = {\n  socket: WebSocket | null;\n  assignedSounds: (Sound | null)[];\n};\n\nconst BeatControls = ({ socket, assignedSounds }: BeatControlsProps) => {\n  const [timerValue, setTimerValue] = useState<number>(0);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [timerRunning, setTimerRunning] = useState<boolean>(false);\n  const [recordedButtons, setRecordedButtons] = useState<number[]>([]);\n  const [axisPosition, setAxisPosition] = useState<number>(0);\n\n  const timerRef = useRef<number | null>(null);\n  const replayRef = useRef<boolean>(false);\n  const audioRefs = useRef<(HTMLAudioElement | null)[]>(assignedSounds.map(() => null));\n\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    setIsPlaying(!isPlaying);\n    if (!timerRunning) {\n      console.log('Starting timer...');\n      setTimerValue(0);\n      setTimerRunning(true);\n      timerRef.current = window.setInterval(() => {\n        setTimerValue((prevValue) => {\n          if (prevValue >= 10000) {\n            console.log('Timer reached 10000 ms, stopping timer...');\n            setTimerRunning(false);\n            window.clearInterval(timerRef.current!);\n            return 0;\n          }\n          return prevValue + 10; // Increase by 10 milliseconds\n        });\n      }, 10); // Update every 10 milliseconds\n    } else {\n      console.log('Pausing timer...');\n      setTimerRunning(false);\n      window.clearInterval(timerRef.current!);\n    }\n  };\n\n  const stopPlayback = () => {\n    console.log('Stopping playback...');\n    setIsPlaying(false);\n    setTimerRunning(false);\n    setTimerValue(0);\n    setAxisPosition(0);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n  };\n\n  const resetTimer = () => {\n    console.log('Resetting timer and clearing recorded buttons...');\n    setRecordedButtons([]);\n    setTimerValue(0);\n    setAxisPosition(0);\n  };\n\n  const handleButtonPress = (pin: number) => {\n    console.log(`Button pressed at time: ${timerValue} ms`);\n    setRecordedButtons((prevButtons) => [...prevButtons, timerValue]);\n  };\n\n  const handleClearRecordedButtons = () => {\n    console.log('Clearing recorded buttons...');\n    setRecordedButtons([]);\n  };\n\n  const handleReplay = () => {\n    if (recordedButtons.length > 0) {\n      console.log('Starting replay...');\n      setIsPlaying(true);\n      setTimerValue(0);\n      setAxisPosition(0);\n      replayRef.current = true;\n    }\n  };\n\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = (event) => {\n        console.log('Received message from socket:', event.data);\n        const data = JSON.parse(event.data);\n        if (data.type === 'button_click' && data.pin) {\n          console.log(`Button click received from pin ${data.pin}`);\n          setRecordedButtons((prevButtons) => [...prevButtons, timerValue]);\n        }\n      };\n    }\n  }, [socket, timerValue]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      console.log('Playing recorded buttons...');\n      let index = 0;\n      const interval = setInterval(() => {\n        if (index < recordedButtons.length) {\n          console.log(`Playing sound for recorded button at time: ${recordedButtons[index]} ms`);\n          setTimerValue(recordedButtons[index]);\n          setAxisPosition((recordedButtons[index] / 10000) * 100); // Update axis position\n\n          // Play the corresponding sound\n          const soundIndex = assignedSounds.findIndex((sound, i) => i === index);\n          if (soundIndex !== -1 && assignedSounds[soundIndex]) {\n            console.log(`Playing assigned sound at index: ${soundIndex}`);\n            if (audioRefs.current[soundIndex]) {\n              audioRefs.current[soundIndex]!.currentTime = 0;\n              audioRefs.current[soundIndex]!.play();\n            }\n          }\n\n          index++;\n        } else {\n          console.log('Completed playing all recorded buttons.');\n          clearInterval(interval);\n          setIsPlaying(false);\n          if (replayRef.current) {\n            replayRef.current = false;\n            setTimeout(() => {\n              console.log('Replaying after delay...');\n              togglePlayPause();\n            }, 500);\n          }\n        }\n      }, 10);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, recordedButtons, assignedSounds]);\n\n  const formatMilliseconds = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = (ms % 1000).toString().padStart(3, '0');\n    return `${seconds}.${milliseconds} s`;\n  };\n\n  return (\n    <div className=\"beat-controls\">\n      <div className=\"timer-display\">\n        <span>{formatMilliseconds(timerValue)}</span>\n      </div>\n      <div className=\"timer-axis\">\n        {recordedButtons.map((time, index) => (\n          <div\n            key={index}\n            className=\"button-indicator\"\n            style={{ left: `${(time / 10000) * 100}%` }}\n          ></div>\n        ))}\n        <div\n          className=\"timer-axis-display\"\n          style={{ left: `${axisPosition}%` }}\n        ></div>\n      </div>\n      <div className=\"playback-controls\">\n        <button onClick={togglePlayPause}>\n          {isPlaying ? <FaPause /> : <FaPlay />} {isPlaying ? 'Pause' : 'Play'}\n        </button>\n        <button onClick={stopPlayback}>\n          <FaStop /> Stop\n        </button>\n        <button onClick={resetTimer}>\n          <FaRedo /> Reset\n        </button>\n        <button onClick={handleClearRecordedButtons}>\n          <FaSquare /> Clear Recorded\n        </button>\n        <button onClick={handleReplay}>\n          <FaReply /> Replay\n        </button>\n      </div>\n      {assignedSounds.map((sound, index) => (\n        <audio\n          key={index}\n          ref={(el) => (audioRefs.current[index] = el)}\n          src={sound ? sound.preview : undefined}\n        ></audio>\n      ))}\n    </div>\n  );\n};\n\nexport default BeatControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}