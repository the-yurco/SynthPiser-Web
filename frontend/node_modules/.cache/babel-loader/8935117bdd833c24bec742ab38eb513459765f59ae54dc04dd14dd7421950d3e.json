{"ast":null,"code":"var _jsxFileName = \"/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaPlay, FaPause, FaStop, FaRedo } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BeatControls = ({\n  socket,\n  assignedSounds\n}) => {\n  _s();\n  const [timerValue, setTimerValue] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [axisPosition, setAxisPosition] = useState(0);\n  const timerRef = useRef(null);\n  const audioRefs = useRef(Object.keys(assignedSounds).reduce((acc, pin) => {\n    acc[parseInt(pin)] = null;\n    return acc;\n  }, {}));\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    if (!isPlaying) {\n      // If not playing, send start recording message to backend\n      sendMessage('start_recording');\n      startTimer();\n    } else {\n      // If playing, send stop recording message to backend\n      sendMessage('stop_recording');\n      pauseTimer();\n    }\n  };\n  const sendMessage = messageType => {\n    // Create a message object\n    const message = {\n      type: messageType\n    };\n\n    // Send the message via WebSocket\n    if (socket) {\n      socket.send(JSON.stringify(message));\n    }\n  };\n  const startTimer = () => {\n    console.log('Starting timer...');\n    setIsPlaying(true);\n    timerRef.current = window.setInterval(() => {\n      setTimerValue(prevValue => {\n        const newValue = prevValue + 10;\n        if (newValue >= 10000) {\n          console.log('Timer reached 10000 ms, stopping timer...');\n          pauseTimer();\n          setTimerValue(0);\n          setAxisPosition(0);\n          return 0;\n        }\n        return newValue;\n      });\n    }, 10);\n  };\n  const pauseTimer = () => {\n    console.log('Pausing timer...');\n    setIsPlaying(false);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n  const stopPlayback = () => {\n    console.log('Stopping playback...');\n    setIsPlaying(false);\n    setTimerValue(0);\n    setAxisPosition(0);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    sendMessage('stop_recording');\n  };\n  const resetTimer = () => {\n    console.log('Resetting timer...');\n    setTimerValue(0);\n    setAxisPosition(0);\n  };\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = event => {\n        console.log('Received message from socket:', event.data);\n      };\n    }\n  }, [socket]);\n  const formatMilliseconds = ms => {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = (ms % 1000).toString().padStart(3, '0');\n    return `${seconds}.${milliseconds} s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"beat-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-display\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatMilliseconds(timerValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlayPause,\n        children: [isPlaying ? /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 38\n        }, this), \" \", isPlaying ? 'Pause' : 'Play']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopPlayback,\n        children: [/*#__PURE__*/_jsxDEV(FaStop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), \" Stop\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: [/*#__PURE__*/_jsxDEV(FaRedo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), \" Reset\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), Object.entries(assignedSounds).map(([pin, soundUrl]) => /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: el => audioRefs.current[parseInt(pin)] = el,\n      src: soundUrl || undefined,\n      preload: \"auto\",\n      onCanPlayThrough: () => console.log(`Audio for pin ${pin} loaded successfully`),\n      onError: e => console.error(`Error loading audio for pin ${pin}:`, e)\n    }, pin, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(BeatControls, \"9jO+ELQxX8h7DST4y8QLFby300k=\");\n_c = BeatControls;\nexport default BeatControls;\nvar _c;\n$RefreshReg$(_c, \"BeatControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FaPlay","FaPause","FaStop","FaRedo","jsxDEV","_jsxDEV","BeatControls","socket","assignedSounds","_s","timerValue","setTimerValue","isPlaying","setIsPlaying","axisPosition","setAxisPosition","timerRef","audioRefs","Object","keys","reduce","acc","pin","parseInt","togglePlayPause","console","log","sendMessage","startTimer","pauseTimer","messageType","message","type","send","JSON","stringify","current","window","setInterval","prevValue","newValue","clearInterval","stopPlayback","resetTimer","onmessage","event","data","formatMilliseconds","ms","seconds","Math","floor","milliseconds","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","entries","map","soundUrl","ref","el","src","undefined","preload","onCanPlayThrough","onError","e","error","_c","$RefreshReg$"],"sources":["/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { FaPlay, FaPause, FaStop, FaRedo } from 'react-icons/fa';\n\ntype Sound = {\n  id: number;\n  preview: string;\n};\n\ntype BeatControlsProps = {\n  socket: WebSocket | null;\n  assignedSounds: { [pin: number]: string | null };\n};\n\nconst BeatControls = ({ socket, assignedSounds }: BeatControlsProps) => {\n  const [timerValue, setTimerValue] = useState<number>(0);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [axisPosition, setAxisPosition] = useState<number>(0);\n\n  const timerRef = useRef<number | null>(null);\n  const audioRefs = useRef<{ [pin: number]: HTMLAudioElement | null }>(\n    Object.keys(assignedSounds).reduce((acc, pin) => {\n      acc[parseInt(pin)] = null;\n      return acc;\n    }, {} as { [pin: number]: HTMLAudioElement | null })\n  );\n\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    if (!isPlaying) {\n      // If not playing, send start recording message to backend\n      sendMessage('start_recording');\n      startTimer();\n    } else {\n      // If playing, send stop recording message to backend\n      sendMessage('stop_recording');\n      pauseTimer();\n    }\n  };\n\n  const sendMessage = (messageType: string) => {\n    // Create a message object\n    const message = {\n      type: messageType\n    };\n\n    // Send the message via WebSocket\n    if (socket) {\n      socket.send(JSON.stringify(message));\n    }\n  };\n\n  const startTimer = () => {\n    console.log('Starting timer...');\n    setIsPlaying(true);\n    timerRef.current = window.setInterval(() => {\n      setTimerValue((prevValue) => {\n        const newValue = prevValue + 10;\n        if (newValue >= 10000) {\n          console.log('Timer reached 10000 ms, stopping timer...');\n          pauseTimer();\n          setTimerValue(0);\n          setAxisPosition(0);\n          return 0;\n        }\n        return newValue;\n      });\n    }, 10);\n  };\n\n  const pauseTimer = () => {\n    console.log('Pausing timer...');\n    setIsPlaying(false);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  const stopPlayback = () => {\n    console.log('Stopping playback...');\n    setIsPlaying(false);\n    setTimerValue(0);\n    setAxisPosition(0);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    sendMessage('stop_recording');\n  };\n\n  const resetTimer = () => {\n    console.log('Resetting timer...');\n    setTimerValue(0);\n    setAxisPosition(0);\n  };\n\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = (event) => {\n        console.log('Received message from socket:', event.data);\n      };\n    }\n  }, [socket]);\n\n  const formatMilliseconds = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = (ms % 1000).toString().padStart(3, '0');\n    return `${seconds}.${milliseconds} s`;\n  };\n\n  return (\n    <div className=\"beat-controls\">\n      <div className=\"timer-display\">\n        <span>{formatMilliseconds(timerValue)}</span>\n      </div>\n      <div className=\"playback-controls\">\n        <button onClick={togglePlayPause}>\n          {isPlaying ? <FaPause /> : <FaPlay />} {isPlaying ? 'Pause' : 'Play'}\n        </button>\n        <button onClick={stopPlayback}>\n          <FaStop /> Stop\n        </button>\n        <button onClick={resetTimer}>\n          <FaRedo /> Reset\n        </button>\n      </div>\n      {Object.entries(assignedSounds).map(([pin, soundUrl]) => (\n        <audio\n          key={pin}\n          ref={(el) => (audioRefs.current[parseInt(pin)] = el)}\n          src={soundUrl || undefined}\n          preload=\"auto\"\n          onCanPlayThrough={() => console.log(`Audio for pin ${pin} loaded successfully`)}\n          onError={(e) => console.error(`Error loading audio for pin ${pin}:`, e)}\n        ></audio>\n      ))}\n    </div>\n  );\n};\n\nexport default BeatControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}