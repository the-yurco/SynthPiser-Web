{"ast":null,"code":"var _jsxFileName = \"/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/PresetsDropdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PresetsDropdown = ({\n  handlePresetSelect,\n  socket,\n  buttonPins,\n  assignedSounds\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPreset, setSelectedPreset] = useState({\n    name: 'No Preset',\n    sounds: []\n  });\n  const [pianoSounds, setPianoSounds] = useState([]);\n  useEffect(() => {\n    const fetchPianoSounds = async () => {\n      try {\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\n        const packId = '4409';\n        const packResponse = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\n        const packData = await packResponse.json();\n        const soundRequests = packData.results.map(async sound => {\n          const soundResponse = await fetch(`https://freesound.org/apiv2/sounds/${sound.id}/?token=${apiKey}`);\n          const soundData = await soundResponse.json();\n          return {\n            id: soundData.id,\n            name: soundData.name,\n            preview: soundData.previews['preview-hq-mp3']\n          };\n        });\n        const soundObjects = await Promise.all(soundRequests);\n        setPianoSounds(soundObjects);\n      } catch (error) {\n        console.error('Error fetching piano sounds from the pack:', error);\n      }\n    };\n    fetchPianoSounds();\n  }, []);\n  const presets = [{\n    name: 'No Preset',\n    sounds: []\n  }, {\n    name: 'Piano Notes',\n    sounds: pianoSounds\n  }, {\n    name: 'Guitar Chords',\n    sounds: []\n  }];\n  const handlePresetClick = preset => {\n    let soundsToSet = [];\n    if (preset.name === 'No Preset') {\n      // Empty out the assignedSounds array\n      soundsToSet = Array(16).fill(null);\n    } else {\n      // Update soundsToSet with the sounds from the preset\n      soundsToSet = preset.sounds;\n    }\n    // Ensure that soundsToSet has 16 elements (fill with null if necessary)\n    soundsToSet = soundsToSet.concat(Array(Math.max(16 - soundsToSet.length, 0)).fill(null));\n    handlePresetSelect(soundsToSet);\n    setSelectedPreset(preset);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"presets\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"presets-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"preset-button\",\n        onClick: () => setIsOpen(!isOpen),\n        children: selectedPreset.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: presets.filter(preset => preset.name !== selectedPreset.name).map((preset, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"preset-button-dropdown\",\n          onClick: () => handlePresetClick(preset),\n          children: preset.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(PresetsDropdown, \"gA4uVpFLLydokbf8rjVkMriSuqY=\");\n_c = PresetsDropdown;\nexport default PresetsDropdown;\nvar _c;\n$RefreshReg$(_c, \"PresetsDropdown\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PresetsDropdown","handlePresetSelect","socket","buttonPins","assignedSounds","_s","isOpen","setIsOpen","selectedPreset","setSelectedPreset","name","sounds","pianoSounds","setPianoSounds","fetchPianoSounds","apiKey","packId","packResponse","fetch","packData","json","soundRequests","results","map","sound","soundResponse","id","soundData","preview","previews","soundObjects","Promise","all","error","console","presets","handlePresetClick","preset","soundsToSet","Array","fill","concat","Math","max","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","filter","index","_c","$RefreshReg$"],"sources":["/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/PresetsDropdown.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Sound } from '../pages/MainPage';\n\ninterface Preset {\n  name: string;\n  sounds: Sound[];\n}\n\ninterface PresetsDropdownProps {\n  handlePresetSelect: (sounds: (Sound)[]) => void;\n  socket: WebSocket | null;\n  buttonPins: number[];\n  assignedSounds: (Sound | null)[];\n}\n\nconst PresetsDropdown: React.FC<PresetsDropdownProps> = ({ handlePresetSelect, socket, buttonPins, assignedSounds }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPreset, setSelectedPreset] = useState<Preset>({ name: 'No Preset', sounds: [] });\n  const [pianoSounds, setPianoSounds] = useState<Sound[]>([]);\n\n  useEffect(() => {\n    const fetchPianoSounds = async () => {\n      try {\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\n        const packId = '4409';\n        const packResponse = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\n        const packData = await packResponse.json();\n    \n        const soundRequests = packData.results.map(async (sound: { id: number }) => {\n          const soundResponse = await fetch(`https://freesound.org/apiv2/sounds/${sound.id}/?token=${apiKey}`);\n          const soundData = await soundResponse.json();\n          return {\n            id: soundData.id,\n            name: soundData.name,\n            preview: soundData.previews['preview-hq-mp3']\n          };\n        });\n    \n        const soundObjects = await Promise.all(soundRequests);\n    \n        setPianoSounds(soundObjects);\n      } catch (error) {\n        console.error('Error fetching piano sounds from the pack:', error);\n      }\n    };    \n\n    fetchPianoSounds();\n  }, []);\n\n  const presets: Preset[] = [\n    { name: 'No Preset', sounds: [] },\n    { name: 'Piano Notes', sounds: pianoSounds },\n    { name: 'Guitar Chords', sounds: [] },\n  ];\n\n  const handlePresetClick = (preset: Preset) => {\n    let soundsToSet: Sound[] = [];\n    if (preset.name === 'No Preset') {\n      // Empty out the assignedSounds array\n      soundsToSet = Array(16).fill(null);\n    } else {\n      // Update soundsToSet with the sounds from the preset\n      soundsToSet = preset.sounds;\n    }\n    // Ensure that soundsToSet has 16 elements (fill with null if necessary)\n    soundsToSet = soundsToSet.concat(Array(Math.max(16 - soundsToSet.length, 0)).fill(null));\n    handlePresetSelect(soundsToSet as (Sound)[]);\n    setSelectedPreset(preset);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"presets\">\n      <div className=\"presets-dropdown\">\n        <button className=\"preset-button\" onClick={() => setIsOpen(!isOpen)}>\n          {selectedPreset.name}\n        </button>\n        {isOpen && (\n          <div className=\"dropdown-menu\">\n            {presets\n              .filter((preset) => preset.name !== selectedPreset.name)\n              .map((preset, index) => (\n                <button\n                  className=\"preset-button-dropdown\"\n                  key={index}\n                  onClick={() => handlePresetClick(preset)}\n                >\n                  {preset.name}\n                </button>\n              ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PresetsDropdown;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}