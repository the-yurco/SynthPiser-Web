{"ast":null,"code":"var _jsxFileName = \"/home/jurco/SynthPiser-Web/frontend/src/pages/MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Assuming axios is installed for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [sounds, setSounds] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentSound, setCurrentSound] = useState(null);\n\n  // Fetch sounds from a free sound API (replace with your API key)\n  useEffect(() => {\n    const fetchSounds = async () => {\n      const response = await axios.get('https://freesound.org/apiv2/search/text/?query=piano&filter=\"license%3A%22Attribution%22\"&limit=16', {\n        headers: {\n          Authorization: `Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz`\n        }\n      } // Add your API key\n      );\n      const data = response.data.results;\n      setSounds(data.map(sound => ({\n        id: sound.id,\n        name: sound.name,\n        preview_url: sound.previews[0].url\n      })));\n    };\n    fetchSounds();\n  }, []);\n  const handleSoundClick = sound => {\n    setCurrentSound(sound);\n    setIsPlaying(true);\n  };\n  const handleAudioEnded = () => {\n    setIsPlaying(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"SynthPiser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sounds\",\n        children: sounds.map(sound => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSoundClick(sound),\n          children: sound.name\n        }, sound.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), (currentSound === null || currentSound === void 0 ? void 0 : currentSound.preview_url) &&\n    /*#__PURE__*/\n    // Play sound effects using preview URL\n    _jsxDEV(\"audio\", {\n      src: currentSound.preview_url,\n      autoPlay: isPlaying,\n      onEnded: handleAudioEnded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n};\n_s(MainPage, \"kRzKC/qVY/+hvL71AuvW7zY7DOs=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MainPage","_s","sounds","setSounds","isPlaying","setIsPlaying","currentSound","setCurrentSound","fetchSounds","response","get","headers","Authorization","data","results","map","sound","id","name","preview_url","previews","url","handleSoundClick","handleAudioEnded","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","autoPlay","onEnded","_c","$RefreshReg$"],"sources":["/home/jurco/SynthPiser-Web/frontend/src/pages/MainPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Assuming axios is installed for HTTP requests\n\ninterface Sound {\n\tid: number;\n\tname: string;\n\tpreview_url?: string; // Optional preview URL for sound effects\n\taudioUrl?: string; // URL for full audio (if using a music API)\n}\n\nconst MainPage: React.FC = () => {\n\tconst [sounds, setSounds] = useState<Sound[]>([]);\n\tconst [isPlaying, setIsPlaying] = useState(false);\n\tconst [currentSound, setCurrentSound] = useState<Sound | null>(null);\n\n\t// Fetch sounds from a free sound API (replace with your API key)\n\tuseEffect(() => {\n\t\tconst fetchSounds = async () => {\n\t\t\tconst response = await axios.get(\n\t\t\t\t'https://freesound.org/apiv2/search/text/?query=piano&filter=\"license%3A%22Attribution%22\"&limit=16',\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz`\n\t\t\t\t\t}\n\t\t\t\t} // Add your API key\n\t\t\t);\n\t\t\tconst data = response.data.results;\n\t\t\tsetSounds(\n\t\t\t\tdata.map((sound: any) => ({\n\t\t\t\t\tid: sound.id,\n\t\t\t\t\tname: sound.name,\n\t\t\t\t\tpreview_url: sound.previews[0].url\n\t\t\t\t}))\n\t\t\t);\n\t\t};\n\n\t\tfetchSounds();\n\t}, []);\n\n\tconst handleSoundClick = (sound: Sound) => {\n\t\tsetCurrentSound(sound);\n\t\tsetIsPlaying(true);\n\t};\n\n\tconst handleAudioEnded = () => {\n\t\tsetIsPlaying(false);\n\t};\n\n\treturn (\n\t\t<div className=\"main-page\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<div className=\"logo\">\n\t\t\t\t\t<h1>SynthPiser</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"sounds\">\n\t\t\t\t\t{sounds.map((sound) => (\n\t\t\t\t\t\t<button key={sound.id} onClick={() => handleSoundClick(sound)}>\n\t\t\t\t\t\t\t{sound.name}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{currentSound?.preview_url && ( // Play sound effects using preview URL\n\t\t\t\t<audio\n\t\t\t\t\tsrc={currentSound.preview_url}\n\t\t\t\t\tautoPlay={isPlaying}\n\t\t\t\t\tonEnded={handleAudioEnded}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}