{"ast":null,"code":"var _jsxFileName = \"/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BeatControls = ({\n  socket,\n  assignedSounds\n}) => {\n  _s();\n  const [timerValue, setTimerValue] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [recordedButtons, setRecordedButtons] = useState([]);\n  const [axisPosition, setAxisPosition] = useState(0);\n  const timerRef = useRef(null);\n  const audioRefs = useRef(assignedSounds.map(() => null));\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    if (isPlaying) {\n      pauseTimer();\n    } else {\n      startTimer();\n    }\n  };\n  const startTimer = () => {\n    console.log('Starting timer...');\n    setIsPlaying(true);\n    timerRef.current = window.setInterval(() => {\n      setTimerValue(prevValue => prevValue + 100);\n      playSoundsAtCurrentTime();\n      console.log(`Timer value: ${timerValue}`);\n    }, 100);\n  };\n  const pauseTimer = () => {\n    console.log('Pausing timer...');\n    setIsPlaying(false);\n    if (timerRef.current !== null) {\n      clearInterval(timerRef.current);\n    }\n  };\n  const stopTimer = () => {\n    console.log('Stopping timer...');\n    pauseTimer();\n    setTimerValue(0);\n    setRecordedButtons([]);\n  };\n  const replayRecordedButtons = () => {\n    console.log('Replaying recorded buttons...');\n    stopTimer();\n    startTimer();\n  };\n  const playSoundsAtCurrentTime = () => {\n    recordedButtons.forEach(button => {\n      if (button.time === timerValue) {\n        console.log(`Playing sound for recorded button at time: ${button.time} ms`);\n        const audio = audioRefs.current[button.pin];\n        if (audio) {\n          audio.currentTime = 0;\n          audio.play();\n        }\n      }\n    });\n  };\n  const handleButtonClick = pin => {\n    console.log(`Button click received from pin ${pin}`);\n    if (!isPlaying) {\n      const time = timerValue;\n      console.log(`Button pressed at time: ${time} ms`);\n      setRecordedButtons(prevButtons => [...prevButtons, {\n        time,\n        pin\n      }]);\n    }\n  };\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = event => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'button_click') {\n          handleButtonClick(message.pin);\n        } else if (message.type === 'assigned_sounds') {\n          console.log('Received assigned sounds:', message.sounds);\n          // Handle assigned sounds\n        }\n      };\n    }\n    // Clean up\n    return () => {\n      if (socket) {\n        socket.onmessage = null;\n      }\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"beat-controls\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(BeatControls, \"aH11SodAbrsG718/VSqz7QblD7E=\");\n_c = BeatControls;\nexport default BeatControls;\nvar _c;\n$RefreshReg$(_c, \"BeatControls\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","BeatControls","socket","assignedSounds","_s","timerValue","setTimerValue","isPlaying","setIsPlaying","recordedButtons","setRecordedButtons","axisPosition","setAxisPosition","timerRef","audioRefs","map","togglePlayPause","console","log","pauseTimer","startTimer","current","window","setInterval","prevValue","playSoundsAtCurrentTime","clearInterval","stopTimer","replayRecordedButtons","forEach","button","time","audio","pin","currentTime","play","handleButtonClick","prevButtons","onmessage","event","message","JSON","parse","data","type","sounds","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ronnie/Desktop/piser/SynthPiser-Web/frontend/src/components/BeatControls.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { FaPlay, FaPause, FaStop, FaRedo, FaSquare, FaReply } from 'react-icons/fa';\n\ntype Sound = {\n  id: number;\n  preview: string;\n};\n\ntype BeatControlsProps = {\n  socket: WebSocket | null;\n  assignedSounds: Sound[];\n};\n\nconst BeatControls = ({ socket, assignedSounds }: BeatControlsProps) => {\n  const [timerValue, setTimerValue] = useState<number>(0);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [recordedButtons, setRecordedButtons] = useState<{ time: number; pin: number }[]>([]);\n  const [axisPosition, setAxisPosition] = useState<number>(0);\n\n  const timerRef = useRef<number | null>(null);\n  const audioRefs = useRef<(HTMLAudioElement | null)[]>(assignedSounds.map(() => null));\n\n  const togglePlayPause = () => {\n    console.log(`Toggle Play/Pause: ${!isPlaying ? 'Play' : 'Pause'}`);\n    if (isPlaying) {\n      pauseTimer();\n    } else {\n      startTimer();\n    }\n  };\n\n  const startTimer = () => {\n    console.log('Starting timer...');\n    setIsPlaying(true);\n    timerRef.current = window.setInterval(() => {\n      setTimerValue((prevValue) => prevValue + 100);\n      playSoundsAtCurrentTime();\n      console.log(`Timer value: ${timerValue}`);\n    }, 100);\n  };\n\n  const pauseTimer = () => {\n    console.log('Pausing timer...');\n    setIsPlaying(false);\n    if (timerRef.current !== null) {\n      clearInterval(timerRef.current);\n    }\n  };\n\n  const stopTimer = () => {\n    console.log('Stopping timer...');\n    pauseTimer();\n    setTimerValue(0);\n    setRecordedButtons([]);\n  };\n\n  const replayRecordedButtons = () => {\n    console.log('Replaying recorded buttons...');\n    stopTimer();\n    startTimer();\n  };\n\n  const playSoundsAtCurrentTime = () => {\n    recordedButtons.forEach((button) => {\n      if (button.time === timerValue) {\n        console.log(`Playing sound for recorded button at time: ${button.time} ms`);\n        const audio = audioRefs.current[button.pin];\n        if (audio) {\n          audio.currentTime = 0;\n          audio.play();\n        }\n      }\n    });\n  };\n\n  const handleButtonClick = (pin: number) => {\n    console.log(`Button click received from pin ${pin}`);\n    if (!isPlaying) {\n      const time = timerValue;\n      console.log(`Button pressed at time: ${time} ms`);\n      setRecordedButtons((prevButtons) => [...prevButtons, { time, pin }]);\n    }\n  };\n\n  useEffect(() => {\n    if (socket) {\n      socket.onmessage = (event: MessageEvent) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'button_click') {\n          handleButtonClick(message.pin);\n        } else if (message.type === 'assigned_sounds') {\n          console.log('Received assigned sounds:', message.sounds);\n          // Handle assigned sounds\n        }\n      };\n    }\n    // Clean up\n    return () => {\n      if (socket) {\n        socket.onmessage = null;\n      }\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"beat-controls\">\n      {/* Render the component... */}\n    </div>\n  );\n};\n\nexport default BeatControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}