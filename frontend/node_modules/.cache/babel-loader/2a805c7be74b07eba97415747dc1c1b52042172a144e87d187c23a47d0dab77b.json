{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ronni\\\\OneDrive\\\\Po\\u010D\\xEDta\\u010D\\\\react-js\\\\SynthPiser-Web\\\\frontend\\\\src\\\\components\\\\PresetsDropdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PresetsDropdown = ({\n  handlePresetSelect,\n  socket,\n  buttonPins,\n  assignedSounds\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPreset, setSelectedPreset] = useState({\n    name: 'No Preset',\n    sounds: []\n  }); // Change to string\n  const [pianoSounds, setPianoSounds] = useState([]);\n  useEffect(() => {\n    const fetchPianoSounds = async () => {\n      try {\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\n        const packId = '4409'; // Pack ID from the provided link\n        const response = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\n        const data = await response.json();\n\n        // Fetch complete sound data for each sound in the pack\n        const fetchedPianoSounds = await Promise.all(data.results.map(async sound => {\n          const soundResponse = await fetch(`https://freesound.org/apiv2/sounds/${sound.id}/?token=${apiKey}`);\n          const soundData = await soundResponse.json();\n          return {\n            id: soundData.id,\n            name: soundData.name,\n            previews: soundData.previews\n          };\n        }));\n        setPianoSounds(fetchedPianoSounds);\n      } catch (error) {\n        console.error('Error fetching piano sounds from the pack:', error);\n      }\n    };\n    fetchPianoSounds();\n  }, []);\n  const presets = [{\n    name: 'No Preset',\n    sounds: []\n  },\n  // Default option with no sounds\n  {\n    name: 'Piano Notes',\n    sounds: pianoSounds\n  }, {\n    name: 'Guitar Chords',\n    sounds: []\n  } // Add your sounds here\n  // Add more presets as needed\n  ];\n  const handlePresetClick = preset => {\n    let soundsToSet = [];\n    if (preset.name === 'No Preset') {\n      // Empty out the assignedSounds array\n      soundsToSet = Array(16).fill(null);\n    } else {\n      // Update soundsToSet with the sounds from the preset\n      soundsToSet = preset.sounds;\n    }\n    // Ensure that soundsToSet has 16 elements (fill with null if necessary)\n    soundsToSet = soundsToSet.concat(Array(Math.max(16 - soundsToSet.length, 0)).fill(null));\n    handlePresetSelect(soundsToSet);\n    setSelectedPreset(preset);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"presets\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"presets-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"preset-button\",\n        onClick: () => setIsOpen(!isOpen),\n        children: selectedPreset.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: presets.filter(preset => preset.name !== selectedPreset.name) // Filter out the selected preset\n        .map((preset, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"preset-button-dropdown\",\n          onClick: () => handlePresetClick(preset),\n          children: preset.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(PresetsDropdown, \"gA4uVpFLLydokbf8rjVkMriSuqY=\");\n_c = PresetsDropdown;\nexport default PresetsDropdown;\nvar _c;\n$RefreshReg$(_c, \"PresetsDropdown\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PresetsDropdown","handlePresetSelect","socket","buttonPins","assignedSounds","_s","isOpen","setIsOpen","selectedPreset","setSelectedPreset","name","sounds","pianoSounds","setPianoSounds","fetchPianoSounds","apiKey","packId","response","fetch","data","json","fetchedPianoSounds","Promise","all","results","map","sound","soundResponse","id","soundData","previews","error","console","presets","handlePresetClick","preset","soundsToSet","Array","fill","concat","Math","max","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","filter","index","_c","$RefreshReg$"],"sources":["C:/Users/ronni/OneDrive/Počítač/react-js/SynthPiser-Web/frontend/src/components/PresetsDropdown.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Sound } from '../pages/MainPage';\r\n\r\ninterface Preset {\r\n  name: string;\r\n  sounds: Sound[];\r\n}\r\n\r\ninterface PresetsDropdownProps {\r\n  handlePresetSelect: (sounds: Sound[]) => void;\r\n  socket: WebSocket | null; // Add socket prop\r\n  buttonPins: number[]; // Add buttonPins prop\r\n  assignedSounds: (Sound | null)[]; // Add assignedSounds prop\r\n}\r\n\r\nconst PresetsDropdown: React.FC<PresetsDropdownProps> = ({ handlePresetSelect, socket, buttonPins, assignedSounds }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedPreset, setSelectedPreset] = useState<Preset>({ name: 'No Preset', sounds: [] }); // Change to string\r\n  const [pianoSounds, setPianoSounds] = useState<Sound[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPianoSounds = async () => {\r\n      try {\r\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\r\n        const packId = '4409'; // Pack ID from the provided link\r\n        const response = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\r\n        const data = await response.json();\r\n\r\n        // Fetch complete sound data for each sound in the pack\r\n        const fetchedPianoSounds: Sound[] = await Promise.all(\r\n          data.results.map(async (sound: { id: number }) => {\r\n            const soundResponse = await fetch(`https://freesound.org/apiv2/sounds/${sound.id}/?token=${apiKey}`);\r\n            const soundData = await soundResponse.json();\r\n            return {\r\n              id: soundData.id,\r\n              name: soundData.name,\r\n              previews: soundData.previews,\r\n            };\r\n          })\r\n        );\r\n\r\n        setPianoSounds(fetchedPianoSounds);\r\n      } catch (error) {\r\n        console.error('Error fetching piano sounds from the pack:', error);\r\n      }\r\n    };\r\n\r\n    fetchPianoSounds();\r\n  }, []);\r\n\r\n  const presets: Preset[] = [\r\n    { name: 'No Preset', sounds: [] }, // Default option with no sounds\r\n    { name: 'Piano Notes', sounds: pianoSounds },\r\n    { name: 'Guitar Chords', sounds: [] }, // Add your sounds here\r\n    // Add more presets as needed\r\n  ];\r\n\r\n  const handlePresetClick = (preset: Preset) => {\r\n    let soundsToSet: Sound[] = [];\r\n    if (preset.name === 'No Preset') {\r\n      // Empty out the assignedSounds array\r\n      soundsToSet = Array(16).fill(null);\r\n    } else {\r\n      // Update soundsToSet with the sounds from the preset\r\n      soundsToSet = preset.sounds;\r\n    }\r\n    // Ensure that soundsToSet has 16 elements (fill with null if necessary)\r\n    soundsToSet = soundsToSet.concat(Array(Math.max(16 - soundsToSet.length, 0)).fill(null));\r\n    \r\n    handlePresetSelect(soundsToSet);\r\n    setSelectedPreset(preset);\r\n    setIsOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"presets\">\r\n      <div className=\"presets-dropdown\">\r\n        <button className=\"preset-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          {selectedPreset.name}\r\n        </button>\r\n        {isOpen && (\r\n          <div className=\"dropdown-menu\">\r\n            {presets\r\n              .filter((preset) => preset.name !== selectedPreset.name) // Filter out the selected preset\r\n              .map((preset, index) => (\r\n                <button\r\n                  className=\"preset-button-dropdown\"\r\n                  key={index}\r\n                  onClick={() => handlePresetClick(preset)}\r\n                >\r\n                  {preset.name}\r\n                </button>\r\n              ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PresetsDropdown;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}