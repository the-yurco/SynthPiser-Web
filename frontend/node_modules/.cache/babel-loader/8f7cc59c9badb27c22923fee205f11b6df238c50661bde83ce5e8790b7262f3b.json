{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ronni\\\\OneDrive\\\\Po\\u010D\\xEDta\\u010D\\\\react-js\\\\SynthPiser-Web\\\\frontend\\\\src\\\\components\\\\PresetsDropdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PresetsDropdown = ({\n  handlePresetSelect,\n  socket,\n  buttonPins\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPreset, setSelectedPreset] = useState('No Preset');\n  const [pianoSounds, setPianoSounds] = useState([]);\n  useEffect(() => {\n    const fetchPianoSounds = async () => {\n      try {\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\n        const packId = '4409'; // Pack ID from the provided link\n        const response = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\n        const data = await response.json();\n\n        // Extract IDs and names of the piano sounds\n        const pianoSoundsData = data.results.filter(sound => sound.tags.includes('keyboard') && sound.tags.includes('note'));\n        const fetchedPianoSounds = pianoSoundsData.map(sound => ({\n          id: sound.id,\n          name: sound.name,\n          url: `https://freesound.org/apiv2/sounds/${sound.id}/download/?token=${apiKey}`\n        }));\n\n        // Set piano sounds to the state\n        setPianoSounds(fetchedPianoSounds);\n      } catch (error) {\n        console.error('Error fetching piano sounds from the pack:', error);\n      }\n    };\n    fetchPianoSounds();\n  }, []);\n  const presets = [{\n    name: 'No Preset',\n    sounds: []\n  },\n  // Default option with no sounds\n  {\n    name: 'Piano Notes',\n    sounds: pianoSounds\n  }, {\n    name: 'Guitar Chords',\n    sounds: []\n  } // Add your sounds here\n  // Add more presets as needed\n  ];\n  const handlePresetClick = preset => {\n    preset.sounds.forEach((sound, index) => {\n      const pin = buttonPins[index];\n      console.log('Sending sound to backend:', {\n        pin,\n        sound\n      });\n      if (socket) {\n        socket.send(JSON.stringify({\n          type: 'assign_sound',\n          pin,\n          sound\n        }));\n      }\n    });\n    handlePresetSelect(preset.sounds);\n    setSelectedPreset(preset.name);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"presets\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"presets-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"preset-button\",\n        onClick: () => setIsOpen(!isOpen),\n        children: selectedPreset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: presets.map((preset, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"preset-button-dropdown\",\n          onClick: () => handlePresetClick(preset),\n          children: preset.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(PresetsDropdown, \"wIpPDL08lkAAv5gN4nH3GJs8o98=\");\n_c = PresetsDropdown;\nexport default PresetsDropdown;\nvar _c;\n$RefreshReg$(_c, \"PresetsDropdown\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PresetsDropdown","handlePresetSelect","socket","buttonPins","_s","isOpen","setIsOpen","selectedPreset","setSelectedPreset","pianoSounds","setPianoSounds","fetchPianoSounds","apiKey","packId","response","fetch","data","json","pianoSoundsData","results","filter","sound","tags","includes","fetchedPianoSounds","map","id","name","url","error","console","presets","sounds","handlePresetClick","preset","forEach","index","pin","log","send","JSON","stringify","type","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ronni/OneDrive/Počítač/react-js/SynthPiser-Web/frontend/src/components/PresetsDropdown.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Sound } from '../pages/MainPage';\r\n\r\ninterface Preset {\r\n  name: string;\r\n  sounds: Sound[];\r\n}\r\n\r\ninterface PresetsDropdownProps {\r\n  handlePresetSelect: (sounds: Sound[]) => void;\r\n  socket: WebSocket | null; // Add socket prop\r\n  buttonPins: number[]; // Add buttonPins prop\r\n}\r\n\r\nconst PresetsDropdown: React.FC<PresetsDropdownProps> = ({ handlePresetSelect, socket, buttonPins }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedPreset, setSelectedPreset] = useState('No Preset');\r\n  const [pianoSounds, setPianoSounds] = useState<Sound[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPianoSounds = async () => {\r\n      try {\r\n        const apiKey = 'Aj9x06vq60VC37YLo9psCPwzvEIyTu0eBQfphtoz';\r\n        const packId = '4409'; // Pack ID from the provided link\r\n        const response = await fetch(`https://freesound.org/apiv2/packs/${packId}/sounds/?token=${apiKey}`);\r\n        const data = await response.json();\r\n\r\n        // Extract IDs and names of the piano sounds\r\n        const pianoSoundsData = data.results.filter((sound: { name: string; tags: string[] }) =>\r\n          sound.tags.includes('keyboard') && sound.tags.includes('note')\r\n        );\r\n        const fetchedPianoSounds: Sound[] = pianoSoundsData.map((sound: { id: number; name: string }) => ({\r\n          id: sound.id,\r\n          name: sound.name,\r\n          url: `https://freesound.org/apiv2/sounds/${sound.id}/download/?token=${apiKey}`,\r\n        }));\r\n\r\n        // Set piano sounds to the state\r\n        setPianoSounds(fetchedPianoSounds);\r\n      } catch (error) {\r\n        console.error('Error fetching piano sounds from the pack:', error);\r\n      }\r\n    };\r\n\r\n    fetchPianoSounds();\r\n  }, []);\r\n\r\n  const presets: Preset[] = [\r\n    { name: 'No Preset', sounds: [] }, // Default option with no sounds\r\n    { name: 'Piano Notes', sounds: pianoSounds },\r\n    { name: 'Guitar Chords', sounds: [] }, // Add your sounds here\r\n    // Add more presets as needed\r\n  ];\r\n\r\n  const handlePresetClick = (preset: Preset) => {\r\n    preset.sounds.forEach((sound, index) => {\r\n      const pin = buttonPins[index];\r\n      console.log('Sending sound to backend:', { pin, sound });\r\n      if (socket) {\r\n        socket.send(JSON.stringify({ type: 'assign_sound', pin, sound }));\r\n      }\r\n    });\r\n    handlePresetSelect(preset.sounds);\r\n    setSelectedPreset(preset.name);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"presets\">\r\n      <div className=\"presets-dropdown\">\r\n        <button className=\"preset-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          {selectedPreset}\r\n        </button>\r\n        {isOpen && (\r\n          <div className=\"dropdown-menu\">\r\n            {presets.map((preset, index) => (\r\n              <button\r\n                className='preset-button-dropdown'\r\n                key={index}\r\n                onClick={() => handlePresetClick(preset)}\r\n              >\r\n                {preset.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PresetsDropdown;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}