import pygame
import asyncio
import websockets
import json
import random
import requests
import RPi.GPIO as GPIO
from pydub import AudioSegment
from pydub.playback import play
import io

pygame.mixer.init()

button_pins = [4, 17, 27, 22, 18, 23, 24, 25, 5, 6, 13, 19, 26, 16, 20, 21]
assigned_sounds = {pin: None for pin in button_pins}
connected_clients = set()

async def handle_message(websocket, path):
    global assigned_sounds, connected_clients
    connected_clients.add(websocket)
    try:
        async for message in websocket:
            data = json.loads(message)
            if data['type'] == 'assign_sound':
                pin = data['pin']
                sound = data['sound']
                assigned_sounds[pin] = sound
                await broadcast_assigned_sounds()
    except websockets.exceptions.ConnectionClosedError:
        pass
    finally:
        connected_clients.remove(websocket)

async def broadcast_assigned_sounds():
    global assigned_sounds, connected_clients
    # Broadcast assigned sounds to all connected clients
    await asyncio.gather(
        *[ws.send(json.dumps({'type': 'assigned_sounds', 'sounds': assigned_sounds})) for ws in connected_clients]
    )

async def button_click(pin):
    print(f"Button on pin {pin} clicked")  # Print button pin number when clicked
    # Optionally, you can perform additional actions here
    if assigned_sounds[pin]:
        await play_sound(pin, assigned_sounds[pin])

async def play_sound(pin, sound):
    sound_url = sound['previews']['preview-hq-mp3']
    response = requests.get(sound_url)
    if response.status_code == 200:
        audio_data = AudioSegment.from_mp3(io.BytesIO(response.content))
        play(audio_data)
    else:
        print(f"Failed to retrieve sound file from {sound_url}. Status code: {response.status_code}")

async def detect_button_clicks():
    # Set up GPIO pins
    GPIO.setmode(GPIO.BCM)
    for pin in button_pins:
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    
    while True:
        # Detect button clicks
        for pin in button_pins:
            if GPIO.input(pin) == GPIO.LOW:
                await button_click(pin)
                # Play sound immediately after button press
        await asyncio.sleep(0.01)  # Reduced sleep time for faster response

start_server = websockets.serve(handle_message, "0.0.0.0", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_until_complete(detect_button_clicks())  # Run the button click detection
asyncio.get_event_loop().run_forever()
