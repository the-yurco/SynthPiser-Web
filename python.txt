import asyncio
import json
import os
import pygame
import requests
import RPi.GPIO as GPIO
import websockets
from Adafruit_ADS1x15 import ADS1115
import numpy as np
import time
import aiohttp
import aiofiles
from pydub import AudioSegment
import wave

# Initialize Pygame mixer
pygame.mixer.init(frequency=44100, size=-16, channels=2)

button_pins = [5, 6, 13, 19, 26, 16, 20, 21, 4, 17, 27, 22, 24, 25, 23, 18]
assigned_sounds = {pin: None for pin in button_pins}
sound_files = {}
playing_sounds = {}
button_pressed = {pin: False for pin in button_pins}
connected_clients = set()
distortion_value = 0
reverb_value = 0
stop_requested = False
recording = False
recorded_sounds = []
recording_event = asyncio.Event()
sound_tasks = []  # List to hold tasks for the current sound

# Set I2C bus number
I2C_BUS_NUM = 1
# Create an ADS1115 ADC object at address 0x48
adc = ADS1115(address=0x48, busnum=I2C_BUS_NUM)
# Set the gain to Ă„â€šĂ˘â‚¬ĹˇÄ‚â€šĂ‚Â±4.096V (adjust if needed)
GAIN = 1

async def handle_message(websocket):
    global connected_clients, sound_files, playing_sounds, assigned_sounds, distortion_value, reverb_value, stop_requested, recorded_sounds
    connected_clients.add(websocket)
    sound_files = {}  # Reset sound_files dictionary when a new client connects
    playing_sounds = {}  # Reset playing_sounds dictionary when a new client connects
    assigned_sounds = {pin: None for pin in button_pins}  # Reset assigned sounds when a new client connects
    try:
        print("Client connected:", websocket.remote_address)
        distortion_value = 0
        reverb_value = 0
        recorded_sounds = []
        async for message in websocket:
            print("Received message:", message)
            data = json.loads(message)
            if data['type'] == 'assign_sound':
                pin = data['pin']
                sound_url = data['sound']
                if assigned_sounds[pin] != sound_url:
                    assigned_sounds[pin] = sound_url
                    if sound_url:
                        await download_sound(pin, sound_url)
                    else:
                        sound_files[pin] = None
                    await broadcast_assigned_sounds()
            elif data['type'] == 'assign_sounds_batch':
                sounds_batch = data['sounds']
                for assignment in sounds_batch:
                    pin = assignment['pin']
                    sound_url = assignment['sound']
                    if assigned_sounds[pin] != sound_url:
                        assigned_sounds[pin] = sound_url
                        if sound_url:
                            await download_sound(pin, sound_url)
                        else:
                            sound_files[pin] = None
                await broadcast_assigned_sounds()
            elif data['type'] == 'reverb':
                # Handle incoming reverb value update
                reverb_value = data['value']
                print("Received reverb value:", reverb_value)
                # Implement logic to update reverb value processing here
            elif data['type'] == 'distortion':
                # Handle incoming distortion value update
                distortion_value = data['value']
                print("Received distortion value:", distortion_value)
                # Implement logic to update distortion value processing here
            elif data['type'] == 'start_recording':
                await start_recording()
            elif data['type'] == 'stop_recording':
                print("Received stop recording")
                if recording:
                    stop_requested = True
                else:
                    await stop_recording()
    except websockets.exceptions.ConnectionClosedError:
        print("Client disconnected:", websocket.remote_address)
        pass
    finally:
        connected_clients.remove(websocket)

async def broadcast_assigned_sounds():
    global connected_clients
    await asyncio.gather(
        *[ws.send(json.dumps({'type': 'assigned_sounds', 'sounds': assigned_sounds})) for ws in connected_clients]
    )

async def download_sound(pin, sound_url):
    global sound_files
    mp3_file_path = f"sound_{pin}.mp3"
    wav_file_path = f"sound_{pin}.wav"

    if os.path.exists(mp3_file_path):
        os.remove(mp3_file_path)
    if os.path.exists(wav_file_path):
        os.remove(wav_file_path)

    async with aiohttp.ClientSession() as session:
        async with session.get(sound_url) as response:
            if response.status == 200:
                async with aiofiles.open(mp3_file_path, 'wb') as f:
                    await f.write(await response.read())
                
                # Convert MP3 to WAV
                sound = AudioSegment.from_mp3(mp3_file_path)
                sound.export(wav_file_path, format="wav")
                
                sound_files[pin] = wav_file_path
            else:
                print(f"Failed to retrieve sound file from {sound_url}. Status code: {response.status}")

delete_tasks = 0

async def button_click(pin):
    global button_pressed, adc, playing_sounds, delete_tasks

    if button_pressed[pin]:
        return

    button_pressed[pin] = True
    print(f"Button on pin {pin} clicked")

    # Read the raw analog value from the reverb potentiometer channel (A3)
    raw_reverb_value = adc.read_adc(3, gain=GAIN)
    percent_reverb_value = round((raw_reverb_value / 26362) * 100)

    # Read the raw analog value from the distortion potentiometer channel (A2)
    raw_distortion_value = adc.read_adc(2, gain=GAIN)
    percent_distortion_value = round((raw_distortion_value / 26362) * 100)

    if pin in playing_sounds:
        playing_sounds[pin].stop()
        del playing_sounds[pin]
        delete_tasks = pin

    if assigned_sounds[pin] is not None:
        await play_sound(pin)

    if sound_files.get(pin):
        await broadcast_button_click(pin)

def adjust_reverb_level(percent_reverb_value):
    # Apply a nonlinear scaling function to compress the range of lower values more aggressively
    scaled_reverb_level = (percent_reverb_value / 100.0) ** 2  # Example nonlinear scaling function
    return scaled_reverb_level
        
async def apply_reverb(sound_array, reverb_level):
    decay = 0.5  # Adjust the decay time of the reverb effect
    reverb_samples = int(44100 * decay)
    reverb = np.zeros_like(sound_array)

    for i in range(reverb_samples, len(sound_array)):
        reverb[i] = sound_array[i - reverb_samples] * reverb_level

    # Mix the original sound with the reverb effect
    sound_with_reverb = sound_array + reverb
    
    if reverb_level < 0.5:
        sound_with_reverb *= 0.4

    return sound_with_reverb

async def play_chunk(sound, cancellation_token):
    while not cancellation_token.is_set():
        await asyncio.sleep(0.1)
    sound.stop()

async def play_sound(pin):
    global sound_files, playing_sounds, adc, reverb_value, distortion_value, sound_tasks, delete_tasks

    sound_file_path = sound_files.get(pin)
    if not sound_file_path:
        return

    chunk_size_seconds = 25  # Set chunk size to 25 seconds
    chunk_size_frames = int(pygame.mixer.get_init()[0] * chunk_size_seconds)

    wf = wave.open(sound_file_path, 'rb')
    sample_width = wf.getsampwidth()
    n_channels = wf.getnchannels()
    sample_rate = wf.getframerate()
    duration = wf.getnframes() / sample_rate

    print("Duration:", duration)  # Debug message

    detect_button_task = None  # Declare detect_button_task outside the if block
    cancellation_token = asyncio.Event()

    try:
        if duration > 90:
            chunk_size_seconds = 25  # Set chunk size to 25 seconds
            chunk_size_frames = int(sample_rate * chunk_size_seconds)

            # Start a task to continuously detect button clicks
            detect_button_task = asyncio.create_task(detect_button_clicks())

            while True:
                # Check if a new button is clicked while the sound is playing
                print(pin, playing_sounds, button_pressed, delete_tasks)
                if button_pressed[pin] and delete_tasks == pin:
                    print("Button pressed while playing sound")
                    cancellation_token.set()
                    break

                sound_chunk = wf.readframes(chunk_size_frames)
                if not sound_chunk:
                    break  # Exit the loop when the end of the file is reached

                sound_array = np.frombuffer(sound_chunk, dtype=np.int16).astype(np.float32) / 32767.0  # Normalize to [-1, 1]

                if len(sound_array.shape) == 1 and n_channels == 2:
                    sound_array = np.stack([sound_array, sound_array], axis=-1)
                elif len(sound_array.shape) == 2 and sound_array.shape[1] != n_channels:
                    if n_channels == 1:
                        sound_array = sound_array.mean(axis=1)
                    else:
                        sound_array = np.stack([sound_array.mean(axis=1)] * n_channels, axis=-1)

                pygame_sound = pygame.mixer.Sound(buffer=sound_chunk)
                pygame_sound.play()

                playing_sounds[pin] = pygame_sound
                print(playing_sounds)

                # Add the current playback task to the sound_tasks list
                sound_task = asyncio.create_task(play_chunk(pygame_sound, cancellation_token))
                sound_tasks.append(sound_task)
                print(sound_tasks)

                await asyncio.sleep(chunk_size_seconds)
        else:
            await play_recorded_sound(pin, distortion_value, reverb_value)  # Default chunk size if duration <= 90 seconds
    finally:
        wf.close()
        print("Sound playback completed")

        # Cancel the detect_button_task after playing the sound
        if detect_button_task is not None:
            detect_button_task.cancel()

        # Cancel all the sound playback tasks if the sound is above 90 seconds and being replayed
        if duration > 90:
            print("Cancelling sound tasks")
            cancellation_token.set()
            for task in sound_tasks:
                task.cancel()
            print(sound_tasks)
        
        # Clear the sound_tasks list
        sound_tasks.clear()

async def button_release(pin):
    global button_pressed
    button_pressed[pin] = False

async def detect_button_clicks():
    GPIO.setmode(GPIO.BCM)
    for pin in button_pins:
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    
    while True:
        for pin in button_pins:
            if GPIO.input(pin) == GPIO.LOW:
                await button_click(pin)
                while GPIO.input(pin) == GPIO.LOW:
                    await asyncio.sleep(0.01)
                await button_release(pin)
        await asyncio.sleep(0.01)

async def read_potentiometer():
    global distortion_value, reverb_value
    # Initialize previous values for distortion and reverb
    prev_distortion_value = None
    prev_reverb_value = None
    
    while True:
        # Read the raw analog value from channel A2 for distortion
        raw_distortion_value = adc.read_adc(2, gain=GAIN)
        # Scale the raw value to a percentage (0-100)
        percent_distortion_value = round((raw_distortion_value / 26362) * 100)
        
        # Read the raw analog value from channel A3 for reverb
        raw_reverb_value = adc.read_adc(3, gain=GAIN)
        # Scale the raw value to a percentage (0-100)
        percent_reverb_value = round((raw_reverb_value / 26362) * 100)
        
        # Check if distortion value changed by 5% or more
        if prev_distortion_value is None or abs(percent_distortion_value - prev_distortion_value) >= 5:
            # Broadcast the distortion value to all connected clients
            await broadcast_potentiometer_value('distortion', percent_distortion_value)
            # Update previous distortion value
            distortion_value = percent_distortion_value
            prev_distortion_value = percent_distortion_value
        
        # Check if reverb value changed by 5% or more
        if prev_reverb_value is None or abs(percent_reverb_value - prev_reverb_value) >= 5:
            # Broadcast the reverb value to all connected clients
            await broadcast_potentiometer_value('reverb', percent_reverb_value)
            # Update previous reverb value
            reverb_value = percent_reverb_value
            prev_reverb_value = percent_reverb_value
        
        # Delay for a short interval before reading again
        await asyncio.sleep(1)

async def broadcast_potentiometer_value(potentiometer_type, value):
    global connected_clients
    message = json.dumps({
        'type': 'potentiometer_value',
        'potentiometer_type': potentiometer_type,
        'value': value
    })
    await asyncio.gather(
        *[ws.send(message) for ws in connected_clients]
    )
    
async def receive_messages():
    global connected_clients
    while True:
        for ws in connected_clients:
            try:
                message = await ws.recv()
                yield message
            except websockets.exceptions.ConnectionClosed:
                connected_clients.remove(ws)
                break

async def start_recording():
    global recording, recorded_sounds, stop_requested, distortion_value, reverb_value

    print("Recording started...")
    recording = True
    start_time = time.time()  # Record the start time of the recording
    end_time = start_time + 120  # Set the end time to 2 minutes from the start time

    # Start the coroutine for playing recorded sounds
    play_recorded_task = asyncio.create_task(play_recorded_sounds(start_time))

    try:
        while recording and time.time() < end_time:  # Continue recording until 2 minutes have elapsed
            time_remaining = end_time - time.time()

            if time_remaining <= 0:
                break

            try:
                message = await asyncio.wait_for(receive_messages().__anext__(), timeout=0.1)
                print("Received message:", message)
                data = json.loads(message)
                if data['type'] == 'stop_recording':
                    print("Received stop recording")
                    stop_requested = True
                    await stop_recording()
                    break  # Exit the recording loop
                elif data['type'] == 'button_click':
                    pin = data['pin']
                    timestamp = round(time.time() - start_time, 2)  # Calculate the timestamp relative to the start time
                    distortion = distortion_value
                    reverb = reverb_value
                    recorded_sounds.append((pin, timestamp, distortion, reverb))
                    print(f"Button on pin {pin} recorded at {timestamp}")
                elif data['type'] == 'reverb':
                    # Handle incoming reverb value update
                    reverb_value = data['value']
                    print("Received reverb value:", reverb_value)
                elif data['type'] == 'distortion':
                    # Handle incoming distortion value update
                    distortion_value = data['value']
                    print("Received distortion value:", distortion_value)
            except asyncio.TimeoutError:
                continue  # No message received within the timeout, continue checking

            # Sort the recorded sounds by timestamp in ascending order
            recorded_sounds.sort(key=lambda x: x[1])

        # Stop recording if the time limit has been reached
        await stop_recording()

    except asyncio.CancelledError:
        print("Recording cancelled...")
        recording = False
    finally:
        # Cancel the playback coroutine when recording ends
        play_recorded_task.cancel()

async def stop_recording():
    global recording, recorded_sounds
    print("Recording stopped...")
    recording = False
    
    # Stop all currently playing sounds
    pygame.mixer.stop()

    # You can process or save the recorded sounds here
    print("Recorded sounds:", recorded_sounds)

async def play_recorded_sounds(start_time):
    global recorded_sounds

    for sound in recorded_sounds:
        pin, timestamp, distortion, reverb = sound
        # Calculate the absolute playback time based on the start time and timestamp
        playback_time = start_time + timestamp
        # Calculate the delay until the sound should start playing
        delay = max(0, playback_time - time.time())
        await asyncio.sleep(delay)
        await play_recorded_sound(pin, distortion, reverb)

async def play_recorded_sound(pin, distortion, reverb):
    global sound_files

    sound_file_path = sound_files.get(pin)
    if sound_file_path:
        # Load the sound file
        sound = pygame.mixer.Sound(sound_file_path)
        sound_array = pygame.sndarray.array(sound).astype(np.float32) / 32767.0  # Normalize to [-1, 1]

        # Apply distortion effect if the distortion level is above 0
        if distortion > 0:
            distortion_level = distortion / 100  # Scale to [0, 1]
            print("Distortion level:", distortion_level)
            sound_array = np.clip(sound_array * (1 + distortion_level * 10), -1, 1)  # Increase distortion effect

        # Apply reverb effect if the reverb level is above 0
        if reverb > 0:
            reverb_level = reverb / 100.0  # Scale to [0, 1]
            sound_array = await apply_reverb(sound_array, reverb_level)

        # Convert back to int16 for pygame sound
        sound_array_int16 = (sound_array * 32767).astype(np.int16)
        sound_array_int16 = np.ascontiguousarray(sound_array_int16)  # Ensure the array is C-contiguous

        # Create and play the processed sound
        processed_sound = pygame.sndarray.make_sound(sound_array_int16)
        processed_sound.play()


async def main():
    global sound_files
    
    await asyncio.gather(
        websockets.serve(handle_message, "0.0.0.0", 8765),
        detect_button_clicks(),
        read_potentiometer(),
    )

async def broadcast_button_click(pin):
    global connected_clients
    
    await asyncio.gather(
        *[ws.send(json.dumps({'type': 'button_click', 'pin': pin})) for ws in connected_clients]
    )

if __name__ == "__main__":
    asyncio.run(main())